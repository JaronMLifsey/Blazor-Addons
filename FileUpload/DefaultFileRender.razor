@implements IDisposable

<div class="file-upload-file" style="--percent: @Percent">
    <div class="left-content">
        @if (File.IsDownloading)
        {
            <p>@(Percent.ToString("P0"))</p>
        }
        <p class="file-upload-file-name">@File.FileName</p>
    </div>

    <button class="file-upload-delete-button" onclick=@(() => { _ = FileUpload.DeleteFile(File); }) disabled="@File.IsDownloading">
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000">
            <path d="M0 0h24v24H0z" fill="none" /><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" />
        </svg>
    </button>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public FrontEndFile File { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public FileUpload FileUpload { get; set; } = default!;

    private double Percent = 0;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (File != null)
        {
            File.OnDownloadProgressMade -= DownloadProgressMade;
        }
        return base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        if (File != null)
        {
            File.OnDownloadProgressMade += DownloadProgressMade;
        }
    }

    public void Dispose()
    {
        if (File != null)
        {
            File.OnDownloadProgressMade -= DownloadProgressMade;
        }
    }

    private void DownloadProgressMade(FrontEndFile file)
    {
        Percent = (double)file.BytesDownloaded / file.FileSizeBytes;
        InvokeAsync(StateHasChanged);
    }
}
