
<div class="file-upload @InvalidClassStr @Class">
    @ChildContent(RenderHelper)
</div>

@code {
    [Parameter]
    public RenderFragment<FileUploadRenderHelper> ChildContent { get; set; }

    [Parameter]
    public RenderFragment<FileUploadRenderHelper> InnerRender { get; set; }

    [Parameter]
    public RenderFragment<IEnumerable<FrontEndFile>> FilesRender { get; set; }

    [Parameter]
    public RenderFragment<FrontEndFile> FileRender { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool IncludeDropZone { get; set; } = true;

    [Parameter]
    public bool IncludeButton { get; set; } = true;

    [Parameter]
    public bool ShowErrors { get; set; } = true;

    /// <summary>
    /// If true, and <see cref="IncludeButton"/> is false, then text will be displayed 
    /// always - if false, it will only display when not files are present.
    /// </summary>
    [Parameter]
    public bool AlwaysShowDropZoneText { get; set; } = true;

    private string InvalidClassStr => IsValid ? string.Empty : "invalid";

    private RenderFragment DefaultRenderChildContent(FileUploadRenderHelper renderHelper)
    {
        return
        @<text>
            @(IncludeDropZone ? renderHelper.RenderDropZone() : DefaultRenderInner(renderHelper))
            @if(ShowErrors && !IsValid){
                <div class="file-upload-errors-container">
                    @foreach(var error in Errors){
                        <p class="file-upload-overall-error">@error</p>
                    }
                </div>
            }
        </text>;
    }

    private RenderFragment DefaultRenderInner(FileUploadRenderHelper renderHelper)
    {
        return
        @<text>
            @if(IncludeButton){
                <div class="file-upload-button-container">
                    @renderHelper.RenderButton("Drag and drop files or click here")
                </div>
            }
            else{
                <p class="file-upload-drop-zone-text">Drag and drop files here</p>
            }
            @FilesRender(Files)
        </text>
    ;
    }

    private RenderFragment DefaultRenderFiles(IEnumerable<FrontEndFile> files)
    {
        if (!files.Any()){
            return@<text></text>;
        }
        return
        @<div class="file-upload-file-container">
            @foreach(var file in files){
                @FileRender(file)
            }
        </div>;
    }

    private RenderFragment DefaultRenderFile(FrontEndFile file)
    {
        return@<DefaultFileRender File="@file" FileUpload="@this"></DefaultFileRender>;
    }

    private FileUploadRenderHelper RenderHelper;

    public class FileUploadRenderHelper
    {
        private string Id = Guid.NewGuid().ToString();
        internal FileUpload Component;

        public FileUploadRenderHelper(FileUpload component)
        {
            Component = component;
        }

        public RenderFragment RenderDropZone()
        {
            return 
            @<div @ref=@Component.DropZone class="file-upload-drop-zone">
                @Component.InnerRender(this)
            </div>;
        }

        public RenderFragment RenderButton(string text, string? ariaLabel = null)
        {
            return
            @<text>
                <label for="@Id" aria-label="@ariaLabel" class="file-upload-upload-button">@text</label>
                <input id="@Id" style="display: none;" @ref=@Component.Input type="file" title=" " multiple=@Component.Multiple />
            </text>;
        }

        public IEnumerable<FrontEndFile> Files => Component.Files;
    }
}
