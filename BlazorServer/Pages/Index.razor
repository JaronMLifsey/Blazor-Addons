@page "/"
@using System.Diagnostics

<FileUpload @ref=@Instance
            Files="@Files"
            FilesChanged="@OnFilesChanged"
            Multiple="true"
            Validation="@Validation"
            FileValidation="@FileValidation"
            IncludeButton="true"
            AllowRenaming="true"
            AllowRenamingExtension="@Toggle"
            FileDeleted="@OnFileDeleted">

</FileUpload>

<button onclick="@ButtonClicked">test</button>

@code {
    private FileUpload Instance;

    private List<FrontEndFile> Files = new(){
        new FrontEndFile("File 1.txt", 1000),
        new FrontEndFile("Extra file 2.txt", 1000),
    };
    private void OnFileDeleted(FrontEndFile fille)
    {
        Debug.WriteLine("deleted");
    }

    private bool Toggle = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    }

    private void ButtonClicked()
    {
        Toggle = !Toggle;
    }

    private List<string>? Validation(IReadOnlyList<FrontEndFile> files)
    {
        if (!files.Any())
        {
            return null;
        }
        return null;
        return new List<string>()
        {
            "This is an error"
        };
    }

    private List<string>? FileValidation(FrontEndFile file)
    {
        if (file.RenamedFileNameExtension == ".txt")
        {
            return new() { file.FileName + ": txt files are now allowed." };
        }
        return null;
    }

    private async Task OnFilesChanged(List<FrontEndFile> files)
    {
        Files = files;

        if (!files.Any())
        {
            return;
        }
        var file = files.First();
        var filePath = "C:\\Users\\Jaron\\Desktop\\test\\TEST__" + file.FileName;
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
        }
        //var contents = await file.GetAllContents();
        //await File.WriteAllBytesAsync(filePath, contents);

        // using var fileStream = File.Create(filePath);
        // using var downloadStream = file.CreateStream();
        // await downloadStream.CopyToAsync(fileStream);
        // fileStream.Close();
    }
}