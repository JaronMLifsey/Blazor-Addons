@page "/"


<FileUpload @ref=@Instance
            Files="@Files"
            FilesChanged="@OnFilesChanged"
            Validation="@Validation"
            FileValidation="@FileValidation"
            IncludeButton="true"
            AllowRenaming="true"
            AllowRenamingExtension="@Open"
            FileDeleted="@OnFileDeleted"
            MinimumFileCount="1"
            MinimumFileCountError="You've got to add more than {0} files."
            MaximumFileCount="2"
            MaximumFileSize="1000000000"
            MaximumFileSizeError="{0}: don't add files bigger than {1}"
            MaximumFileCountError="you can't add more files than {0}.">
</FileUpload>

<div style="position: relative; width: 40vw; margin: auto; border: 1px solid black; padding: 2rem;">
    <button @onclick="@((_) => Open = !Open)">
        Toggle
    </button>
    <button @onclick="@((_) => AsModal = !AsModal)">
        AsModal
    </button>

    <DialogModal @bind-Open="@Open" AsModal="@AsModal" CloseOnClickOutside="true" CloseOnEscape="true" Origin="(1, 0)" Transform="(0, 1)" OffsetPixels="(0, 0)">
        <p>Test modal content. alksjdf lkasj tdelkjalsket nlasnyl naljn yhlj,satnryhn srmtynmretm nsrftnumndft mjnmsrtn,srfmtk,jmdfmgnfdghfgd n fcgjhn fy j dfh zds gh zd j dfh j cgfh kj cgh kjcg fhj.</p>
    </DialogModal>
</div>


@code {
    private bool Open = false;
    private bool AsModal = false;

    private FileUpload Instance = default!;

    private List<FrontEndFile> Files = new(){
    };
    private void OnFileDeleted(FrontEndFile fille)
    {
    }

    private List<string>? Validation(IReadOnlyList<FrontEndFile> files)
    {
        return null;
    }

    private List<string>? FileValidation(FrontEndFile file)
    {
        return null;
    }

    private async Task OnFilesChanged(List<FrontEndFile> files)
    {
        Files = files;
        if (!files.Any())
        {
            return;
        }

        var data = await files.First().GetAllContents();
    }
}