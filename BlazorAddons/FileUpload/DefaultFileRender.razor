@namespace BlazorAddons

@implements IDisposable

<div class=@("file-upload-file" + (File.IsValid ? string.Empty : " invalid")) style="--percent: @Percent">
    <div class="left-content">
        @if (!File.IsValid)
        {
            @RenderingOverrides.Icons.Error
        }
        @if (File.IsDownloading)
        {
            <p>@(Percent.ToString("P0"))</p>
        }
        @if (File.IsValid)
        {
            if (AllowRenaming)
            {
                <div class="file-upload-rename-container">
                    @RenderingOverrides.Icons.Edit
                    <input aria-label="@FileNameAriaLabel" class="file-upload-file-name editable" type="text" value="@Renamed" @onchange="@OnRenamed" />
                </div>
            }
            else
            {
                <p class="file-upload-file-name">@(File.RenamedFileName ?? File.FileName)</p>
            }
        }
        else
        {
            <div class="file-upload-file-errors-container">
                @foreach(var error in File.Errors)
                {
                    <p class="file-upload-file-error">@error</p>
                }
            </div>
        }
    </div>

    <div class="right-content">
        
        @if (File.IsValid && AllowRenaming && !AllowRenamingExtension)
        {
            <p class="file-upload-file-extension-text"><span class="extension">@Extension</span> file</p>
        }
        <p>@FrontEndFile.BytesToString(File.FileSizeBytes)</p>
        <button aria-label="@DeleteAriaLabel" class="file-upload-file-delete-button" onclick=@(() => { _ = FileUpload.DeleteFile(File); }) disabled="@File.IsDownloading">
            @RenderingOverrides.Icons.Delete
        </button>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public FrontEndFile File { get; set; } = default!;
    public FrontEndFile? _File { get; set; }

    [Parameter]
    [EditorRequired]
    public FileUpload FileUpload { get; set; } = default!;

    [Parameter]
    public bool AllowRenaming { get; set; } = true;

    [Parameter]
    public bool AllowRenamingExtension { get; set; } = true;
    public bool? _AllowRenamingExtension;

    [Parameter]
    public EventCallback<FrontEndFile> FileRenamed { get; set; }

    [Parameter]
    public string FileNameAriaLabel { get; set; } = "File Name";

    [Parameter]
    public string DeleteAriaLabel { get; set; } = "Delete";

    private string Renamed = string.Empty;
    private string Extension = string.Empty;

    private double Percent = 0;

    protected override void OnParametersSet()
    {
        if (_File != null && _File != File)
        {
            _File.OnDownloadProgressMade -= DownloadProgressMade;
        }

        if (File != null && _File != File)
        {
            File.OnDownloadProgressMade += DownloadProgressMade;

            Renamed = AllowRenamingExtension ? File.FileName : File.FileNameNoExtension;
            Extension = File.FileNameExtension;
        }

        if (_AllowRenamingExtension == null)
        {
            _AllowRenamingExtension = AllowRenamingExtension;
        }

        if (AllowRenamingExtension != _AllowRenamingExtension)
        {
            _AllowRenamingExtension = AllowRenamingExtension;
            Renamed = AllowRenamingExtension ? Renamed + Extension : Path.GetFileNameWithoutExtension(Renamed);
        }

        _File = File;
    }

    private Task OnRenamed(ChangeEventArgs ev)
    {
        Renamed = ev.Value?.ToString() ?? string.Empty;
        File.RenamedFileName = Renamed + (AllowRenamingExtension ? string.Empty : Extension);
        FileUpload.Validate();
        return FileRenamed.InvokeAsync(File);
    }

    public void Dispose()
    {
        if (File != null)
        {
            File.OnDownloadProgressMade -= DownloadProgressMade;
        }
    }

    private void DownloadProgressMade(long bytesDownloaded, bool downloadComplete)
    {
        Percent = Math.Min(1, (double)bytesDownloaded / File.FileSizeBytes);
        InvokeAsync(StateHasChanged);
    }
}
