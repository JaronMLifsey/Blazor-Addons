@namespace BlazorAddons
@implements IDisposable

@ChildContent(File)

@code {
    private RenderFragment DefaultRender(FrontEndFile file)
    {
        return @<div class=@("file-upload-file" + (file.IsValid ? string.Empty : " invalid")) style="--percent: @Percent">
            <div class="left-content">
                @if (!file.IsValid)
                {
                    @RenderingOverrides.Icons.Error
                }
                @if (file.IsDownloading)
                {
                    <p class="file-upload-file-percent">@(Percent.ToString("P0"))</p>
                }
                @if (file.IsValid)
                {
                    if (AllowRenaming)
                    {
                        <div class="file-upload-rename-container">
                             @RenderingOverrides.Icons.Edit
                             <input aria-label="@FileNameAriaLabel" 
                             class="file-upload-file-name editable" 
                             type="text"
                             @bind-value="@RenamedFileName"/>
                        </div>
                    }
                    else
                    {
                        <p class="file-upload-file-name">@(file.RenamedFileName ?? file.FileName)</p>
                    }
                }
                else
                {
                    <div class="file-upload-file-errors-container">
                        @foreach(var error in file.Errors)
                        {
                            <p class="file-upload-file-error">@error</p>
                        }
                    </div>
                }
            </div>

            <div class="right-content">
                @if (file.IsValid && AllowRenaming && !AllowRenamingExtension && file.RenamedFileNameExtension != string.Empty)
                {
                    <p class="file-upload-file-extension-text"><span class="extension">@file.RenamedFileNameExtension</span> file</p>
                }
                <p>@FrontEndFile.BytesToString(file.FileSizeBytes)</p>
                <button aria-label="@DeleteAriaLabel" class="blazor-addons-button file-upload-file-delete-button" onclick=@(() => { _ = FileUpload.DeleteFile(File); }) disabled="@file.IsDownloading">
                    @RenderingOverrides.Icons.Delete
                </button>
            </div>
        </div>;
    }
}

@code {
    [Parameter]
    [EditorRequired]
    public FrontEndFile File { get; set; } = default!;
    public FrontEndFile? _File { get; set; }

    [Parameter]
    [EditorRequired]
    public FileUpload FileUpload { get; set; } = default!;

    [Parameter]
    public bool AllowRenaming { get; set; } = true;

    [Parameter]
    public bool AllowRenamingExtension { get; set; } = true;

    [Parameter]
    public EventCallback<FrontEndFile> FileRenamed { get; set; }

    [Parameter]
    public string FileNameAriaLabel { get; set; } = "File Name";

    [Parameter]
    public string DeleteAriaLabel { get; set; } = "Delete";

    [Parameter]
    public RenderFragment<FrontEndFile> ChildContent { get; set; }

    /// <summary>
    /// If renaming is enabled, this is bound to the input field.
    /// </summary>
    public string RenamedFileName{
        get => AllowRenamingExtension ? File.RenamedFileName : File.RenamedFileNameNoExtension;
        set{
            if (AllowRenamingExtension)
            {
                File.RenamedFileName = value;
            }
            else
            {
                File.RenamedFileName = File.RenamedFileNameExtension == string.Empty ? Path.GetFileNameWithoutExtension(value) : value + File.RenamedFileNameExtension;
            }

            FileUpload.Validate();
            FileRenamed.InvokeAsync(File);
        }
    }

    public DefaultFileRender()
    {
        ChildContent = DefaultRender;
    }

    private double Percent = 0;

    protected override void OnParametersSet()
    {
        if (_File != null && _File != File)
        {
            _File.OnDownloadProgressMade -= DownloadProgressMade;
        }

        if (_File != File)
        {
            File.OnDownloadProgressMade += DownloadProgressMade;
        }

        _File = File;
    }

    public void Dispose()
    {
        if (File != null)
        {
            File.OnDownloadProgressMade -= DownloadProgressMade;
        }
    }

    private void DownloadProgressMade(long bytesDownloaded, bool downloadComplete)
    {
        Percent = Math.Min(1, (double)bytesDownloaded / File.FileSizeBytes);
        InvokeAsync(StateHasChanged);
    }
}
